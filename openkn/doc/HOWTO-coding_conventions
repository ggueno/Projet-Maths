#***************************************************************************\
# Copyright (C) by University Paris-Est - MISS team   
# HOWTO-coding_conventions created in 09 2008.
# Mail : biri@univ-mlv.fr                    
#                                                     
# This file is part of the libIMAC-math.
#
# The libIMAC-math is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# The libIMAC-math is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#***************************************************************************/
Coding Conventions

    * Thou shalt write in English.
    * Write the documentation using Doxygen. See "Documenting the code" section.
    * Write the tests using CxxUnit. See "Writing tests" section.
    * Format the code properly. See "Code format" section.
    * Use suffixes "LIN_" "MAC_" "WIN_" for non-portable files.
    * Class names should begin with a upper case letter 

 Vector, Matrix, GLMesh, FastConvolutionRGB

    * Attributes names should begin with a lower case letter and following words with uppercase. 

 x,y,z,xAxis

    * Functions names should begin with a lower case letter and following words with uppercase. 

 x(),getX(),getXAxis()

    * Preprocessor macros and constants should be uppercase. 

 MAX(A,B), PI, UPSILON

    * Don't forget that your code will be licenced under the LGPL.
    * Always redefine copy constructor.
    * Use size_t when refering to... a size.
    * Use std::copy instead of memcpy and std::fill instead of memset
    * Encapsulate classes attributes like that : 

    private :
    size_t imageWidth;
    public :
    size_t inline width() {return imageWidth;}

or like that for read/write members :

    private :
    size_t imageWidth;
    public :
    size_t & inline width() {return imageWidth;}
    const size_t & inline width() const {return imageWidth;}

    * Try to use references on parameters and return values for public functions and restrict pointers passing to private functions
    * Use the unique lib exception instead of asserts and error codes 

Documenting the code

    * Please read the coding conventions
    * The code is documented in Doxygen format, please read Doxygen manual at : http://www.stack.nl/~dimitri/doxygen/docblocks.html
    * A class must be documented like that : 

/** \brief Write a brief description : Class X is usefull to do this
* Here you can write a longer description, remarks, notes, etc..
* on many lines.
*/
class E {

    * An attribute must me documented like that : 

/** \brief Write a brief description : Attribute X does this.
* If necessary write longer description here
*/
int X;

    * A function must be documented like that : 

/** \brief Write a brief description : function X does this.
* If necessary write longer description here
* \param x brief description of the parameter
* \param y brief description of the parameter
* \return  brief description of the returned object
*/
int X(int x, int Y);

Code Format

    * Use one tab for each indentation level
    * Respect following code organisation for the headers (hpp) files 

/***************************************************************************\
 * Copyright (C) by University Paris-Est - MISS team
 * ImageException.hpp created in 09 2008.
 * Mail : biri@univ-mlv.fr
 *
 * This file is part of the libIMAC-image.
 *
 * The libIMAC-image is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * The libIMAC-image is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
\***************************************************************************/

/*
 * Anti-doublon
 */
#ifndef __LIBIMAC_IMAGE__IMAGEEXCEPTION_HPP__
#define __LIBIMAC_IMAGE__IMAGEEXCEPTION_HPP__

/*
 * External Includes
 */
#include <iostream>
#include <string>


/*
 * Internal Includes
 */

/*
 * Namespace
 */
namespace li{
    namespace image{


	/*
	 * Class definition
	 */

	/** \brief Exception thrown in case of image error
	 *
	 */
	class ImageException {

	    /*
	     * Constructor & destructors
	     */
	public:
	    /** \brief Constructor with error string and calling function name
	     *  \param err Error string
	     *  \param funcname calling function name
	     */
	    ImageException(const std::string& err="", const std::string& funcname="");
	    /** \brief Copy Constructor
	     *  \param e Error to clone
	     */
	    ImageException(const ImageException & e);

	private :
	    /** \brief Concatenated error string
	     */
	    std::string str;
	public :
	    /** \brief Getter for str
	     *  \return Concatenated error string
	     */
	    inline std::string errorString() const {return str;}
	};

	/** \brief Operator << for ImageException
	 *  \param stream output stream
	 *  \err ImageException to print
	 *  \return output stream
	 */
	inline std::ostream& operator <<(std::ostream& stream, const ImageException & err){
	    return stream << err.errorString();
	}


	/*
	 * End of Namespace
	 */
    }
}

/*
 * End of Anti-doublon
 */
#endif

    * Respect following code organisation for the cpp files 

/***************************************************************************\
 * Copyright (C) by University Paris-Est - MISS team
 * ImageException.cpp created in 09 2008.
 * Mail : biri@univ-mlv.fr
 *
 * This file is part of the libIMAC-image.
 *
 * The libIMAC-image is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * The libIMAC-image is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
\***************************************************************************/


/*
 * Internal Includes
 */
#include <ImageException.hpp>

/*
 * Namespace
 */
namespace li{
  namespace image{

    /*
     * Functions definitions
     */


    ImageException::ImageException(const std::string& err, const std::string& funcname){
      if(funcname=="" && err=="")
	str = "Error : No message";
      if(funcname!="" && err!="")
	str = "(" + funcname + ") Error : " + err;
      if(funcname=="" && err!="")
	str = "Error : " + err;
      if(funcname!="" && err=="")
	str = "(" + funcname + ") Error : No message";
    }

    ImageException::ImageException(const ImageException & e) {
      str = e.errorString();
    }

  /*
   * End of Namespace
   */
  }
}

Respecter les conventions de codage

Les conventions de codage de la libIMAC sous emacs se réglent à partir des commandes suivantes :
Dans le .emacs

Cette ligne doit être commentée :

 (setq-default indent-tabs-mode nil)

Cette ligne commande le nombre de tabulations affichées :

 (setq default-tab-width 4)

Bon réglage d'indentation par défaut :

 (setq c-default-style "stroustrup")

Dans le fichier

 C-x h pour tout selectionner
 M-x tabify pour transformer les espaces en tabulations
 M-x untabify pour faire le contraire
 C-M-\ pour indenter tout un fichier

Et pour vous simplifier la vie :

 (fset 'tabularbell "\C-xh\234\M-x tabify")
 (global-set-key "\C-ct" 'tabularbell)


References

    * Operators redefinition : 
