#***************************************************************************\
# Copyright (C) by University Paris-Est - MISS team   
# HOWTO-mercurial created in 09 2008.
# Mail : biri@univ-mlv.fr                    
#                                                     
# This file is part of the libIMAC-math.
#
# The libIMAC-math is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# The libIMAC-math is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#***************************************************************************/

INTRODUCTION

La libIMAC est une bibliothèque graphique & de vision. Elle nécessite, pour son développement, les technologies suivantes :

    * Mercurial
    * CMake
    * CxxTest 

RECUPERER MERCURIAL & LA LIB IMAC

La documentation de mercurial est ici : http://linuxfr.org/~oldmooh/25614.html

On peut parcourir le repository ici : http://mercurial.intuxication.org/hg/libimac-dev

Pour le récuperer :

    * sudo apt-get install mercurial
    * hg clone http://mercurial.intuxication.org/hg/libimac-dev
    * enjoy 

RECUPERER UNE VERSION A JOUR

Faire :

 hg pull
 hg update

COMPILATION

La libIMAC utilise la chaine de compilation cmake. Pour compiler :

    * Installer cmake : sudo apt-get install cmake
    * suivre le Howto-build des libs 

ECRIRE LES TESTS

    * Lire le manuel CxxTest sur : http://cxxtest.com/guide.html
    * Faire une class test dans le répertoire tests de la bibliothèque en cours sous forme d'un hpp et pour chaque classe de cette bibliothèque. Ex : Pour une classe A, écrire tests/ATest.hpp
    * Suivre les conventions de programmation
    * Ne pas oublier le ; à la fin de chaque classe
    * Dans la classe test écrire une fonction de test pour chaque fonctionnalité que vous voulez tester.
    * Vous voulez toutes les tester
    * Les fonctions de test doivent commencer par test, renvoient void et prennent en argument void. \\ ex : void testConstructorWithoutArguments(void) {...}
    * Ajouter la nouvelle classe test à la variable TESTSUITE du Makefile courant. 

PUBLIER DES MODIFICATIONS

Une fois les modifications faites sur votre code, faire un

 hg commit

cela crée des changesets

Pour envoyer des changesets :

 hg push <site repository>

Le login et mdp ainsi que le <site repository> vous ont été fourni par l'équipe de dev. 